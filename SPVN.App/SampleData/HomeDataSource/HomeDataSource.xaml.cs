//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.HomeDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class About { }
#else

	public class About : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public About()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/SPVN.App;component/SampleData/HomeDataSource/HomeDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private AboutItemCollection _AboutItemCollection = new AboutItemCollection();

		public AboutItemCollection AboutItemCollection
		{
			get
			{
				return this._AboutItemCollection;
			}
		}
	}

	public class AboutItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Image = string.Empty;

		public string Image
		{
			get
			{
				return this._Image;
			}

			set
			{
				if (this._Image != value)
				{
					this._Image = value;
					this.OnPropertyChanged("Image");
				}
			}
		}

		private string _Header = string.Empty;

		public string Header
		{
			get
			{
				return this._Header;
			}

			set
			{
				if (this._Header != value)
				{
					this._Header = value;
					this.OnPropertyChanged("Header");
				}
			}
		}

		private string _Content = string.Empty;

		public string Content
		{
			get
			{
				return this._Content;
			}

			set
			{
				if (this._Content != value)
				{
					this._Content = value;
					this.OnPropertyChanged("Content");
				}
			}
		}

		private string _Area = string.Empty;

		public string Area
		{
			get
			{
				return this._Area;
			}

			set
			{
				if (this._Area != value)
				{
					this._Area = value;
					this.OnPropertyChanged("Area");
				}
			}
		}
	}

	public class AboutItemCollection : System.Collections.ObjectModel.ObservableCollection<AboutItem>
	{ 
	}
#endif
}
